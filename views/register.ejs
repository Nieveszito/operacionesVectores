<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Registrarse</title>
  <link href="https://fonts.googleapis.com/css2?family=Karla:wght@400;700&display=swap" rel="stylesheet" />
   <style>
    body {
      background: linear-gradient(135deg, #1f013d 0%, #00004d 100%);
      color: #E0E0E0;
      font-family: "Karla", sans-serif;
      display: grid;
      place-items: center;
      height: 100vh;
      margin: 0;
    }

    form {
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(20px);
      -webkit-backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      padding: 1.5rem 2rem;
      border-radius: 12px;
      max-width: 500px;
      width: 100%;
      box-sizing: border-box;
      box-shadow: 0 4px 30px rgba(0, 0, 0, 0.2);
    }

    h2 {
      text-align: center;
      margin-bottom: 1.5rem;
      color: #F8F8F8;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      margin-bottom: 1.5rem;
      position: relative;
    }

    label {
      font-size: 14px;
      padding-bottom: 0.5rem;
      color: #BBDEFB;
    }

    input {
      border: 1.5px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      padding: 12px;
      font-size: 16px;
      background: rgba(255, 255, 255, 0.1);
      color: #E0E0E0;
      transition: border-color 0.3s ease;
    }

    input:focus {
      border: 2px solid #9C27B0;
      outline: none;
      box-shadow: 0 0 10px rgba(156, 39, 176, 0.6);
    }

    input:hover {
      border: 1.5px solid #9C27B0;
      cursor: pointer;
    }

    .error-msg, .alert-error {
      color: #FF5252;
      font-size: 13px;
      margin-top: 0.5rem;
      display: none;
    }

    .alert-error {
      background: rgba(255, 0, 0, 0.2);
      border: 1px solid #FF5252;
      padding: 0.75rem 1rem;
      border-radius: 6px;
      margin-bottom: 1.5rem;
      display: block;
    }

    .input-error {
      border: 2px solid #FF5252 !important;
    }

    button {
      background: rgba(156, 39, 176, 0.8);
      border: none;
      padding: 14px 20px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      color: white;
      width: 100%;
      font-weight: 600;
      transition: all 0.3s ease;
      margin-top: 0.5rem;
    }

    button:hover {
      background: #7B1FA2;
      transform: translateY(-2px);
    }

    button:disabled {
      background: rgba(255, 255, 255, 0.2);
      cursor: not-allowed;
    }

    a {
      display: block;
      text-align: center;
      margin-top: 1.5rem;
      text-decoration: none;
      color: #BBDEFB;
      font-weight: 600;
      transition: color 0.3s ease;
    }

    a:hover {
      color: #90CAF9;
      text-decoration: underline;
    }

    .password-requirements {
      font-size: 12px;
      color: #B0BEC5;
      margin-top: 0.25rem;
    }
  </style>
</head>
<body>
  <form id="registerForm" action="/register" method="POST" novalidate>
    <h2>Crear Cuenta</h2>

    <% if (errors && errors.length > 0) { %>
      <div class="alert-error">
        <% errors.forEach(error => { %>
          <p><%= error.msg %></p>
        <% }) %>
      </div>
    <% } %>

    <div class="form-group">
      <label for="username">Usuario</label>
      <input 
        type="text" 
        id="username" 
        name="username" 
        placeholder="Ej: JuanPerez" 
        value="<%= formData && formData.username || '' %>" 
        required 
        minlength="3"
        maxlength="50"
        autocomplete="username" />
      <span class="error-msg" id="error-username">El usuario debe tener al menos 3 caracteres</span>
    </div>

    <div class="form-group">
      <label for="email">Correo electrónico</label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        placeholder="Ej: correo@example.com" 
        value="<%= formData && formData.email || '' %>" 
        required 
        autocomplete="email" />
      <span class="error-msg" id="error-email">Por favor, ingresa un correo válido</span>
    </div>

    <div class="form-group">
      <label for="password">Contraseña</label>
      <input 
        type="password" 
        id="password" 
        name="password" 
        placeholder="Mínimo 6 caracteres" 
        required 
        minlength="6"
        autocomplete="new-password" />
      <span class="password-requirements">Mínimo 6 caracteres</span>
      <span class="error-msg" id="error-password">La contraseña debe tener al menos 6 caracteres</span>
    </div>

    <div class="form-group">
      <label for="confirmPassword">Confirmar Contraseña</label>
      <input 
        type="password" 
        id="confirmPassword" 
        name="confirmPassword" 
        placeholder="Vuelve a escribir tu contraseña" 
        required 
        autocomplete="new-password" />
      <span class="error-msg" id="error-confirmPassword">Por favor, confirma la contraseña</span>
      <span class="error-msg" id="error-match">Las contraseñas no coinciden</span>
    </div>

    <button type="submit" id="submitButton">Crear Cuenta</button>
    <a href="/login">¿Ya tienes cuenta? Inicia sesión aquí</a>
  </form>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('registerForm');
      const username = document.getElementById('username');
      const email = document.getElementById('email');
      const password = document.getElementById('password');
      const confirmPassword = document.getElementById('confirmPassword');
      const submitButton = document.getElementById('submitButton');

      const errorUsername = document.getElementById('error-username');
      const errorEmail = document.getElementById('error-email');
      const errorPassword = document.getElementById('error-password');
      const errorConfirmPassword = document.getElementById('error-confirmPassword');
      const errorMatch = document.getElementById('error-match');

      // Función para validar email
      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      // Función para resetear errores
      function resetErrors() {
        [errorUsername, errorEmail, errorPassword, errorConfirmPassword, errorMatch].forEach(error => {
          error.style.display = 'none';
        });
        [username, email, password, confirmPassword].forEach(input => {
          input.classList.remove('input-error');
        });
      }

      // Función para mostrar error
      function showError(input, errorElement, message) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        input.classList.add('input-error');
      }

      // Validación en tiempo real
      username.addEventListener('blur', validateUsername);
      email.addEventListener('blur', validateEmail);
      password.addEventListener('blur', validatePassword);
      confirmPassword.addEventListener('blur', validateConfirmPassword);

      function validateUsername() {
        resetErrors();
        if (username.value.trim().length < 3) {
          showError(username, errorUsername, 'El usuario debe tener al menos 3 caracteres');
          return false;
        }
        return true;
      }

      function validateEmail() {
        resetErrors();
        if (!isValidEmail(email.value.trim())) {
          showError(email, errorEmail, 'Por favor, ingresa un correo válido');
          return false;
        }
        return true;
      }

      function validatePassword() {
        resetErrors();
        if (password.value.length < 6) {
          showError(password, errorPassword, 'La contraseña debe tener al menos 6 caracteres');
          return false;
        }
        return true;
      }

      function validateConfirmPassword() {
        resetErrors();
        if (confirmPassword.value === '') {
          showError(confirmPassword, errorConfirmPassword, 'Por favor, confirma la contraseña');
          return false;
        }
        if (password.value !== confirmPassword.value) {
          showError(confirmPassword, errorMatch, 'Las contraseñas no coinciden');
          password.classList.add('input-error');
          return false;
        }
        return true;
      }

      // Validación al enviar el formulario
      form.addEventListener('submit', function(event) {
        let isValid = true;

        if (!validateUsername()) isValid = false;
        if (!validateEmail()) isValid = false;
        if (!validatePassword()) isValid = false;
        if (!validateConfirmPassword()) isValid = false;

        if (!isValid) {
          event.preventDefault();
          // Enfocar el primer campo con error
          const firstError = form.querySelector('.input-error');
          if (firstError) {
            firstError.focus();
          }
        } else {
          // Deshabilitar el botón para evitar doble envío
          submitButton.disabled = true;
          submitButton.textContent = 'Creando cuenta...';
        }
      });

      // Habilitar validación cuando los campos cambien
      form.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', function() {
          this.classList.remove('input-error');
          const errorId = 'error-' + this.id;
          const errorElement = document.getElementById(errorId);
          if (errorElement) {
            errorElement.style.display = 'none';
          }
          errorMatch.style.display = 'none';
        });
      });
    });
  </script>
</body>
</html>